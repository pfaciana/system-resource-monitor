"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6559],{3331:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>d});var a=r(8101);const s={},i=a.createContext(s);function t(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),a.createElement(i.Provider,{value:n},e.children)}},7570:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>c,frontMatter:()=>t,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"api/thread-management","title":"Thread Management","description":"Functions for monitoring and analyzing individual CPU threads.","source":"@site/docs/api/thread-management.md","sourceDirName":"api","slug":"/api/thread-management","permalink":"/system-resource-monitor/docs/api/thread-management","draft":false,"unlisted":false,"editUrl":"https://github.com/pfaciana/system-resource-monitor/tree/master/docs/docs/api/thread-management.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"sidebar_label":"Thread Management"},"sidebar":"tutorialSidebar","previous":{"title":"Memory","permalink":"/system-resource-monitor/docs/api/memory"},"next":{"title":"Utilities","permalink":"/system-resource-monitor/docs/api/utilities"}}');var s=r(5105),i=r(3331);const t={sidebar_position:4,sidebar_label:"Thread Management"},d="Thread Management",l={},o=[{value:"Initialization",id:"initialization",level:2},{value:"<code>startProfilingCpu()</code>",id:"startprofilingcpu",level:3},{value:"<code>stopProfilingCpu()</code>",id:"stopprofilingcpu",level:3},{value:"Thread State",id:"thread-state",level:2},{value:"<code>getThreadState()</code>",id:"getthreadstate",level:3},{value:"<code>getThreadUsage()</code>",id:"getthreadusage",level:3},{value:"Thread Statistics",id:"thread-statistics",level:2},{value:"<code>getMinThread()</code>",id:"getminthread",level:3},{value:"<code>getMaxThread()</code>",id:"getmaxthread",level:3},{value:"<code>getAvgThread()</code>",id:"getavgthread",level:3},{value:"<code>getMedThread()</code>",id:"getmedthread",level:3},{value:"Thread Thresholds",id:"thread-thresholds",level:2},{value:"<code>isAnyThreadAbove()</code>",id:"isanythreadabove",level:3},{value:"<code>isAnyThreadBelow()</code>",id:"isanythreadbelow",level:3},{value:"<code>areAllThreadsAbove()</code>",id:"areallthreadsabove",level:3},{value:"<code>areAllThreadsBelow()</code>",id:"areallthreadsbelow",level:3},{value:"Type Definitions",id:"type-definitions",level:2}];function h(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"thread-management",children:"Thread Management"})}),"\n",(0,s.jsx)(n.p,{children:"Functions for monitoring and analyzing individual CPU threads."}),"\n",(0,s.jsx)(n.h2,{id:"initialization",children:"Initialization"}),"\n",(0,s.jsx)(n.p,{children:"Before using any thread monitoring functions, you must initialize the profiling system:"}),"\n",(0,s.jsx)(n.h3,{id:"startprofilingcpu",children:(0,s.jsx)(n.code,{children:"startProfilingCpu()"})}),"\n",(0,s.jsx)(n.p,{children:"Initializes CPU profiling. Must be called before using any thread monitoring functions."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function startProfilingCpu(): Promise<void>\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { startProfilingCpu } from 'system-resource-monitor';\n\nawait startProfilingCpu();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"stopprofilingcpu",children:(0,s.jsx)(n.code,{children:"stopProfilingCpu()"})}),"\n",(0,s.jsx)(n.p,{children:"Stops CPU profiling and cleans up resources."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function stopProfilingCpu(): void\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { stopProfilingCpu } from 'system-resource-monitor';\n\nstopProfilingCpu();\n"})}),"\n",(0,s.jsx)(n.h2,{id:"thread-state",children:"Thread State"}),"\n",(0,s.jsx)(n.h3,{id:"getthreadstate",children:(0,s.jsx)(n.code,{children:"getThreadState()"})}),"\n",(0,s.jsx)(n.p,{children:"Returns the current state of all CPU threads."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function getThreadState(): ThreadState[]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ThreadState[]"})," - Array of thread states containing total and idle times"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { startProfilingCpu, stopProfilingCpu, getThreadState } from 'system-resource-monitor'\n\n// Initialize CPU profiling\nawait startProfilingCpu()\n\nconst threadStates = getThreadState()\nconsole.log('Thread States:', threadStates)\n\nstopProfilingCpu()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"getthreadusage",children:(0,s.jsx)(n.code,{children:"getThreadUsage()"})}),"\n",(0,s.jsx)(n.p,{children:"Returns the usage percentage for each CPU thread."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function getThreadUsage(\n  startThreads?: ThreadState[] | null,\n  endThreads?: ThreadState[]\n): ThreadUsage[]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"startThreads"})," (optional) - Initial thread states. Default: Uses internal state"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"endThreads"})," (optional) - Current thread states. Default: Uses ",(0,s.jsx)(n.code,{children:"getThreadState()"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ThreadUsage[]"})," - Array of thread usage values (0-1)"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { startProfilingCpu, stopProfilingCpu, getThreadUsage } from 'system-resource-monitor';\n\n// Initialize CPU profiling\nawait startProfilingCpu();\n\nconst usage = getThreadUsage();\nconsole.log('Thread Usage:', usage);\n\nstopProfilingCpu()\n"})}),"\n",(0,s.jsx)(n.h2,{id:"thread-statistics",children:"Thread Statistics"}),"\n",(0,s.jsx)(n.h3,{id:"getminthread",children:(0,s.jsx)(n.code,{children:"getMinThread()"})}),"\n",(0,s.jsx)(n.p,{children:"Returns the usage of the least utilized thread."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function getMinThread(\n  inPercent?: boolean,\n  precision?: number,\n  threadsUsage?: ThreadUsage[]\n): number\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"inPercent"})," (optional) - If true, returns percentage (0-100). Default: ",(0,s.jsx)(n.code,{children:"true"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"precision"})," (optional) - Decimal places in result. Default: ",(0,s.jsx)(n.code,{children:"5"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"threadsUsage"})," (optional) - Thread usage values. Default: Uses ",(0,s.jsx)(n.code,{children:"getThreadUsage()"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"getmaxthread",children:(0,s.jsx)(n.code,{children:"getMaxThread()"})}),"\n",(0,s.jsx)(n.p,{children:"Returns the usage of the most utilized thread."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function getMaxThread(\n  inPercent?: boolean,\n  precision?: number,\n  threadsUsage?: ThreadUsage[]\n): number\n"})}),"\n",(0,s.jsx)(n.h3,{id:"getavgthread",children:(0,s.jsx)(n.code,{children:"getAvgThread()"})}),"\n",(0,s.jsx)(n.p,{children:"Returns the average usage across all threads."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function getAvgThread(\n  inPercent?: boolean,\n  precision?: number,\n  threadsUsage?: ThreadUsage[]\n): number\n"})}),"\n",(0,s.jsx)(n.h3,{id:"getmedthread",children:(0,s.jsx)(n.code,{children:"getMedThread()"})}),"\n",(0,s.jsx)(n.p,{children:"Returns the median usage across all threads."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function getMedThread(\n  inPercent?: boolean,\n  precision?: number,\n  threadsUsage?: ThreadUsage[]\n): number\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import {\n  startProfilingCpu,\n  stopProfilingCpu,\n  getMinThread,\n  getMaxThread,\n  getAvgThread,\n  getMedThread\n} from 'system-resource-monitor';\n\n// Initialize CPU profiling\nawait startProfilingCpu();\n\nconsole.log(`Min Thread Usage: ${getMinThread()}%`);\nconsole.log(`Max Thread Usage: ${getMaxThread()}%`);\nconsole.log(`Avg Thread Usage: ${getAvgThread()}%`);\nconsole.log(`Med Thread Usage: ${getMedThread()}%`);\n\nstopProfilingCpu()\n"})}),"\n",(0,s.jsx)(n.h2,{id:"thread-thresholds",children:"Thread Thresholds"}),"\n",(0,s.jsx)(n.h3,{id:"isanythreadabove",children:(0,s.jsx)(n.code,{children:"isAnyThreadAbove()"})}),"\n",(0,s.jsx)(n.p,{children:"Checks if any thread's usage is above a threshold."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function isAnyThreadAbove(\n  threshold?: number,\n  endThreads?: ThreadState[]\n): boolean\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"threshold"})," (optional) - Percentage threshold (0-100). Default: ",(0,s.jsx)(n.code,{children:"50"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"endThreads"})," (optional) - Current thread states. Default: Uses ",(0,s.jsx)(n.code,{children:"getThreadState()"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"isanythreadbelow",children:(0,s.jsx)(n.code,{children:"isAnyThreadBelow()"})}),"\n",(0,s.jsx)(n.p,{children:"Checks if any thread's usage is below a threshold."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function isAnyThreadBelow(\n  threshold?: number,\n  endThreads?: ThreadState[]\n): boolean\n"})}),"\n",(0,s.jsx)(n.h3,{id:"areallthreadsabove",children:(0,s.jsx)(n.code,{children:"areAllThreadsAbove()"})}),"\n",(0,s.jsx)(n.p,{children:"Checks if all threads' usage is above a threshold."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function areAllThreadsAbove(\n  threshold?: number,\n  endThreads?: ThreadState[]\n): boolean\n"})}),"\n",(0,s.jsx)(n.h3,{id:"areallthreadsbelow",children:(0,s.jsx)(n.code,{children:"areAllThreadsBelow()"})}),"\n",(0,s.jsx)(n.p,{children:"Checks if all threads' usage is below a threshold."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function areAllThreadsBelow(\n  threshold?: number,\n  endThreads?: ThreadState[]\n): boolean\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import {\n  startProfilingCpu,\n  stopProfilingCpu,\n  isAnyThreadAbove,\n  areAllThreadsBelow\n} from 'system-resource-monitor';\n\n// Initialize CPU profiling\nawait startProfilingCpu();\n\n// Check for any overloaded threads\nif (isAnyThreadAbove(90)) {\n  console.log('Warning: At least one thread is near capacity!');\n}\n\n// Check if system is idle\nif (areAllThreadsBelow(10)) {\n  console.log('System is idle');\n}\n\nstopProfilingCpu()\n"})}),"\n",(0,s.jsx)(n.h2,{id:"type-definitions",children:"Type Definitions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface ThreadState {\n  index: number;  // Thread identifier\n  total: number;  // Total CPU time\n  idle: number;   // Idle CPU time\n}\n\ntype ThreadUsage = number;  // Thread usage as decimal (0-1)\n"})}),"\n",(0,s.jsx)(n.admonition,{title:"Thread vs CPU Usage",type:"tip",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Thread usage functions monitor individual CPU threads"}),"\n",(0,s.jsxs)(n.li,{children:["CPU usage functions (",(0,s.jsx)(n.code,{children:"getCpuUsage()"}),") monitor overall system CPU utilization"]}),"\n",(0,s.jsx)(n.li,{children:"Use thread monitoring for detailed performance analysis"}),"\n",(0,s.jsx)(n.li,{children:"Use CPU monitoring for general system health checks"}),"\n",(0,s.jsxs)(n.li,{children:["Both require calling ",(0,s.jsx)(n.code,{children:"startProfilingCpu()"})," first"]}),"\n"]})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);