"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[168],{3331:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>o});var s=i(8101);const r={},l=s.createContext(r);function t(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(l.Provider,{value:n},e.children)}},5910:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"api/cpu-usage","title":"CPU Usage","description":"Functions for monitoring overall CPU utilization.","source":"@site/docs/api/cpu-usage.md","sourceDirName":"api","slug":"/api/cpu-usage","permalink":"/system-resource-monitor/docs/api/cpu-usage","draft":false,"unlisted":false,"editUrl":"https://github.com/pfaciana/system-resource-monitor/tree/master/docs/docs/api/cpu-usage.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"sidebar_label":"CPU Usage"},"sidebar":"tutorialSidebar","previous":{"title":"Core Information","permalink":"/system-resource-monitor/docs/api/core-info"},"next":{"title":"Memory","permalink":"/system-resource-monitor/docs/api/memory"}}');var r=i(5105),l=i(3331);const t={sidebar_position:2,sidebar_label:"CPU Usage"},o="CPU Usage",a={},c=[{value:"Initialization",id:"initialization",level:2},{value:"<code>startProfilingCpu()</code>",id:"startprofilingcpu",level:3},{value:"<code>stopProfilingCpu()</code>",id:"stopprofilingcpu",level:3},{value:"Usage Monitoring",id:"usage-monitoring",level:2},{value:"<code>getCpuUsage()</code>",id:"getcpuusage",level:3},{value:"Threshold Checking",id:"threshold-checking",level:2},{value:"<code>isCpuAbove()</code>",id:"iscpuabove",level:3},{value:"<code>isCpuBelow()</code>",id:"iscpubelow",level:3},{value:"Type Definitions",id:"type-definitions",level:2}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"cpu-usage",children:"CPU Usage"})}),"\n",(0,r.jsx)(n.p,{children:"Functions for monitoring overall CPU utilization."}),"\n",(0,r.jsx)(n.h2,{id:"initialization",children:"Initialization"}),"\n",(0,r.jsx)(n.p,{children:"Before using any CPU monitoring functions, you must initialize the profiling system:"}),"\n",(0,r.jsx)(n.h3,{id:"startprofilingcpu",children:(0,r.jsx)(n.code,{children:"startProfilingCpu()"})}),"\n",(0,r.jsx)(n.p,{children:"Initializes CPU profiling. Must be called before using any CPU monitoring functions."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function startProfilingCpu(): Promise<void>\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { startProfilingCpu } from 'system-resource-monitor';\n\nawait startProfilingCpu();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"stopprofilingcpu",children:(0,r.jsx)(n.code,{children:"stopProfilingCpu()"})}),"\n",(0,r.jsx)(n.p,{children:"Stops CPU profiling and cleans up resources."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function stopProfilingCpu(): void\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { stopProfilingCpu } from 'system-resource-monitor';\n\nstopProfilingCpu();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"usage-monitoring",children:"Usage Monitoring"}),"\n",(0,r.jsx)(n.h3,{id:"getcpuusage",children:(0,r.jsx)(n.code,{children:"getCpuUsage()"})}),"\n",(0,r.jsx)(n.p,{children:"Returns the current CPU usage as a percentage or decimal."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function getCpuUsage(\n  inPercent?: boolean,\n  precision?: number,\n  endThreads?: ThreadState[]\n): number\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inPercent"})," (optional) - If true, returns value as percentage (0-100). If false, returns decimal (0-1). Default: ",(0,r.jsx)(n.code,{children:"true"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"precision"})," (optional) - Number of decimal places for the result. Default: ",(0,r.jsx)(n.code,{children:"5"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"endThreads"})," (optional) - Current thread states for calculation. Default: Uses ",(0,r.jsx)(n.code,{children:"getThreadState()"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"number"})," - CPU usage value"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import { startProfilingCpu, stopProfilingCpu, getCpuUsage } from \'system-resource-monitor\';\n\n// Initialize CPU profiling\nawait startProfilingCpu();\n\n// Get usage as percentage\nconsole.log(`CPU Usage: ${getCpuUsage()}%`); // e.g., "CPU Usage: 45.23%"\n\n// Get raw usage (0-1) with 3 decimal places\nconsole.log(`CPU Usage: ${getCpuUsage(false, 3)}`); // e.g., "CPU Usage: 0.452"\n\nstopProfilingCpu()\n'})}),"\n",(0,r.jsx)(n.h2,{id:"threshold-checking",children:"Threshold Checking"}),"\n",(0,r.jsx)(n.h3,{id:"iscpuabove",children:(0,r.jsx)(n.code,{children:"isCpuAbove()"})}),"\n",(0,r.jsx)(n.p,{children:"Checks if CPU usage is above a specified threshold."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function isCpuAbove(\n  threshold?: number,\n  endThreads?: ThreadState[]\n): boolean\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"threshold"})," (optional) - Percentage threshold to check against (0-100). Default: ",(0,r.jsx)(n.code,{children:"50"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"endThreads"})," (optional) - Current thread states for calculation. Default: Uses ",(0,r.jsx)(n.code,{children:"getThreadState()"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"boolean"})," - True if CPU usage is above threshold, false otherwise"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { startProfilingCpu, stopProfilingCpu, isCpuAbove } from 'system-resource-monitor';\n\n// Initialize CPU profiling\nawait startProfilingCpu();\n\n// Check if CPU usage is above 80%\nif (isCpuAbove(80)) {\n  console.log('High CPU usage detected!');\n}\n\nstopProfilingCpu()\n"})}),"\n",(0,r.jsx)(n.h3,{id:"iscpubelow",children:(0,r.jsx)(n.code,{children:"isCpuBelow()"})}),"\n",(0,r.jsx)(n.p,{children:"Checks if CPU usage is below a specified threshold."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function isCpuBelow(\n  threshold?: number,\n  endThreads?: ThreadState[]\n): boolean\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"threshold"})," (optional) - Percentage threshold to check against (0-100). Default: ",(0,r.jsx)(n.code,{children:"50"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"endThreads"})," (optional) - Current thread states for calculation. Default: Uses ",(0,r.jsx)(n.code,{children:"getThreadState()"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"boolean"})," - True if CPU usage is below threshold, false otherwise"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { startProfilingCpu, stopProfilingCpu, isCpuBelow } from 'system-resource-monitor';\n\n// Initialize CPU profiling\nawait startProfilingCpu();\n\n// Check if CPU usage is below 20%\nif (isCpuBelow(20)) {\n  console.log('Low CPU usage detected');\n}\n\nstopProfilingCpu()\n"})}),"\n",(0,r.jsx)(n.h2,{id:"type-definitions",children:"Type Definitions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface ThreadState {\n  index: number;  // Thread identifier\n  total: number;  // Total CPU time\n  idle: number;   // Idle CPU time\n}\n"})}),"\n",(0,r.jsxs)(n.admonition,{title:"Implementation Note",type:"info",children:[(0,r.jsx)(n.p,{children:"CPU usage is calculated by comparing CPU states over time:"}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Initialize profiling with ",(0,r.jsx)(n.code,{children:"startProfilingCpu()"})]}),"\n",(0,r.jsx)(n.li,{children:"Captures initial state"}),"\n",(0,r.jsx)(n.li,{children:"Waits for sampling interval"}),"\n",(0,r.jsx)(n.li,{children:"Captures final state"}),"\n",(0,r.jsxs)(n.li,{children:["Calculates usage: ",(0,r.jsx)(n.code,{children:"(totalDiff - idleDiff) / totalDiff"})]}),"\n"]}),(0,r.jsxs)(n.p,{children:["The first reading will have a small delay while the initial state is established after calling ",(0,r.jsx)(n.code,{children:"startProfilingCpu()"}),"."]})]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);