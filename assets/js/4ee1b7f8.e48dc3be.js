"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1875],{3331:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var o=t(8101);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}},6047:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>g,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"getting-started/basic-usage","title":"Basic Usage","description":"This guide will show you how to use the core features of System Resource Monitor to track CPU, memory, and thread usage.","source":"@site/docs/getting-started/basic-usage.md","sourceDirName":"getting-started","slug":"/getting-started/basic-usage","permalink":"/system-resource-monitor/docs/getting-started/basic-usage","draft":false,"unlisted":false,"editUrl":"https://github.com/pfaciana/system-resource-monitor/tree/master/docs/docs/getting-started/basic-usage.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"sidebar_label":"Basic Usage"},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/system-resource-monitor/docs/getting-started/installation"},"next":{"title":"Core Concepts","permalink":"/system-resource-monitor/docs/getting-started/core-concepts"}}');var s=t(5105),r=t(3331);const i={sidebar_position:3,sidebar_label:"Basic Usage"},a="Basic Usage",l={},c=[{value:"System Information",id:"system-information",level:2},{value:"Memory Usage",id:"memory-usage",level:2},{value:"CPU Monitoring",id:"cpu-monitoring",level:2},{value:"Thread Management",id:"thread-management",level:2},{value:"Utility Functions",id:"utility-functions",level:2}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"basic-usage",children:"Basic Usage"})}),"\n",(0,s.jsx)(n.p,{children:"This guide will show you how to use the core features of System Resource Monitor to track CPU, memory, and thread usage."}),"\n",(0,s.jsx)(n.h2,{id:"system-information",children:"System Information"}),"\n",(0,s.jsx)(n.p,{children:"Get basic system information:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import {\n\tgetPhysicalCoreCount,\n\tgetLogicalCoreCount,\n\tgetPlatform\n} from 'system-resource-monitor';\n\nconsole.log(`Platform: ${getPlatform()}`);\nconsole.log(`Physical CPU Cores: ${getPhysicalCoreCount()}`);\nconsole.log(`Logical CPU Cores: ${getLogicalCoreCount()}`);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"memory-usage",children:"Memory Usage"}),"\n",(0,s.jsx)(n.p,{children:"Track system memory usage with these functions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import {\n\tgetMemoryUsage,\n\tgetTotalMemory,\n\tgetUsedMemory\n} from 'system-resource-monitor';\n\n// Get memory usage as a percentage\nconsole.log(`Memory Usage: ${getMemoryUsage(true)}%`);\n\n// Get total and used memory in GB\nconsole.log(`Total Memory: ${getTotalMemory(true)}GB`);\nconsole.log(`Used Memory: ${getUsedMemory(true)}GB`);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"cpu-monitoring",children:"CPU Monitoring"}),"\n",(0,s.jsx)(n.p,{children:"The library provides several functions to monitor CPU usage:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import {\n\tstartProfilingCpu,\n\tstopProfilingCpu,\n\tgetCpuUsage,\n\tisCpuAbove,\n\tisCpuBelow,\n} from 'system-resource-monitor'\n\n// Initialize CPU profiling\nawait startProfilingCpu()\n\n// Get overall CPU usage as a percentage\nconsole.log(`CPU Usage: ${getCpuUsage()}%`) // e.g., \"CPU Usage: 45.2%\"\n\n// Check if CPU usage exceeds a threshold\nif (isCpuAbove(80)) {\n\tconsole.log('High CPU usage detected!')\n}\n\n// Check if CPU usage is below a threshold\nif (isCpuBelow(10)) {\n\tconsole.log('CPU usage is low!')\n}\n\nstopProfilingCpu()\n"})}),"\n",(0,s.jsxs)(n.admonition,{title:"Important",type:"caution",children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"startProfilingCpu()"})," function must be called before using any CPU or thread monitoring functions. This is not required for memory, core information, or utility functions."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { startProfilingCpu, stopProfilingCpu } from 'system-resource-monitor';\n\n// Start CPU profiling\nawait startProfilingCpu();\n\n// ... use CPU and thread monitoring functions ...\n\n// Stop CPU profiling when done\nstopProfilingCpu();\n"})})]}),"\n",(0,s.jsx)(n.h2,{id:"thread-management",children:"Thread Management"}),"\n",(0,s.jsx)(n.p,{children:"Monitor individual CPU threads and their utilization:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import {\n\tstartProfilingCpu,\n\tstopProfilingCpu,\n\tgetThreadUsage,\n\tgetMinThread,\n\tgetMaxThread,\n\tgetAvgThread,\n\tisAnyThreadAbove,\n} from 'system-resource-monitor'\n\n// Initialize CPU profiling\nawait startProfilingCpu()\n\n// Get usage for each CPU thread\nconst threadUsages = getThreadUsage()\nconsole.log('Thread Usage:', threadUsages)\n\n// Get statistics about thread usage\nconsole.log(`Minimum Thread Usage: ${getMinThread(true)}%`)\nconsole.log(`Maximum Thread Usage: ${getMaxThread(true)}%`)\nconsole.log(`Average Thread Usage: ${getAvgThread(true)}%`)\n\n// Check if any thread exceeds a threshold\nif (isAnyThreadAbove(90)) {\n\tconsole.log('Warning: At least one thread is under heavy load!')\n}\n\nstopProfilingCpu()\n"})}),"\n",(0,s.jsx)(n.h2,{id:"utility-functions",children:"Utility Functions"}),"\n",(0,s.jsx)(n.p,{children:"The library includes some helpful utility functions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import { delay, round } from 'system-resource-monitor';\n\n// Wait for a specific duration\nawait delay(1000); // waits for 1 second\n\n// Round numbers to a specific precision\nconsole.log(round(45.6789, 2)); // outputs: 45.68\n"})})]})}function g(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);