"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3212],{131:(e,n,t)=>{t.d(n,{A:()=>s});t(8101);var i=t(3526);const r={tabItem:"tabItem_w3dh"};var a=t(5105);function s(e){let{children:n,hidden:t,className:s}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,i.A)(r.tabItem,s),hidden:t,children:n})}},3331:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var i=t(8101);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}},5283:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"getting-started/core-concepts","title":"Core Concepts","description":"This guide explains the fundamental principles behind how System Resource Monitor works and some important considerations when using it.","source":"@site/docs/getting-started/core-concepts.md","sourceDirName":"getting-started","slug":"/getting-started/core-concepts","permalink":"/system-resource-monitor/docs/getting-started/core-concepts","draft":false,"unlisted":false,"editUrl":"https://github.com/pfaciana/system-resource-monitor/tree/master/docs/docs/getting-started/core-concepts.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"sidebar_label":"Core Concepts"},"sidebar":"tutorialSidebar","previous":{"title":"Basic Usage","permalink":"/system-resource-monitor/docs/getting-started/basic-usage"},"next":{"title":"API Reference","permalink":"/system-resource-monitor/docs/category/api-reference"}}');var r=t(5105),a=t(3331),s=t(7647),l=t(131);const o={sidebar_position:4,sidebar_label:"Core Concepts"},c="Core Concepts",u={},d=[{value:"CPU Profiling Initialization",id:"cpu-profiling-initialization",level:2},{value:"How to Initialize",id:"how-to-initialize",level:3},{value:"CPU Usage Calculation",id:"cpu-usage-calculation",level:2},{value:"How It Works",id:"how-it-works",level:3},{value:"Thread States",id:"thread-states",level:2},{value:"Memory Monitoring",id:"memory-monitoring",level:2},{value:"Cross-Platform Support",id:"cross-platform-support",level:2},{value:"Important Considerations",id:"important-considerations",level:2},{value:"Automatic Cleanup",id:"automatic-cleanup",level:2}];function h(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"core-concepts",children:"Core Concepts"})}),"\n",(0,r.jsx)(n.p,{children:"This guide explains the fundamental principles behind how System Resource Monitor works and some important considerations when using it."}),"\n",(0,r.jsx)(n.h2,{id:"cpu-profiling-initialization",children:"CPU Profiling Initialization"}),"\n",(0,r.jsx)(n.p,{children:"Before using any CPU or thread monitoring functions, you must initialize the profiling system:"}),"\n",(0,r.jsx)(n.mermaid,{value:"graph TD\n    A[Initialize] --\x3e|startProfilingCpu| B[Capture Initial State]\n    B --\x3e|Internal Timer| C[Update State Every Second]\n    C --\x3e|User Functions| D[Monitor CPU/Threads]\n    D --\x3e|Monitor Done| E[stopProfilingCpu]"}),"\n",(0,r.jsx)(n.h3,{id:"how-to-initialize",children:"How to Initialize"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { startProfilingCpu, stopProfilingCpu } from 'system-resource-monitor';\n\n// Start monitoring\nawait startProfilingCpu();\n\n// ... use CPU and thread monitoring functions ...\n\n// Clean up when done\nstopProfilingCpu();\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Only CPU and thread monitoring functions require initialization. Memory, core information, and utility functions can be used without calling ",(0,r.jsx)(n.code,{children:"startProfilingCpu()"}),"."]})}),"\n",(0,r.jsx)(n.h2,{id:"cpu-usage-calculation",children:"CPU Usage Calculation"}),"\n",(0,r.jsx)(n.p,{children:"The library calculates CPU usage by measuring the difference in CPU states over time:"}),"\n",(0,r.jsx)(n.mermaid,{value:"graph LR\n    A[Initial State] --\x3e|Wait 100ms| B[Final State]\n    B --\x3e|Calculate Difference| C[Usage Percentage]\n    C --\x3e|Update| D[Start New Interval]"}),"\n",(0,r.jsx)(n.h3,{id:"how-it-works",children:"How It Works"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["First, call ",(0,r.jsx)(n.code,{children:"startProfilingCpu()"})," to initialize the monitoring system"]}),"\n",(0,r.jsx)(n.li,{children:"The library captures a snapshot of each CPU thread's state, including:"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Total time (user + system + nice + idle + irq)"}),"\n",(0,r.jsx)(n.li,{children:"Idle time"}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"After a short interval (100ms), it captures another snapshot"}),"\n",(0,r.jsxs)(n.li,{children:["Usage is calculated using this formula:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"usage = (totalDiff - idleDiff) / totalDiff\n"})}),"\n","where:"]}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"totalDiff"})," = end.total - start.total"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"idleDiff"})," = end.idle - start.idle"]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{title:"Sampling Intervals",type:"note",children:(0,r.jsxs)(n.p,{children:["After calling ",(0,r.jsx)(n.code,{children:"startProfilingCpu()"}),", the library maintains an internal state that updates every second to ensure accurate measurements. There will be a small delay (about 100ms) for the first reading while the initial state is established."]})}),"\n",(0,r.jsx)(n.h2,{id:"thread-states",children:"Thread States"}),"\n",(0,r.jsxs)(n.p,{children:["Each CPU thread is represented by a ",(0,r.jsx)(n.code,{children:"ThreadState"})," interface:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface ThreadState {\n  index: number;  // Thread identifier\n  total: number;  // Total CPU time\n  idle: number;   // Idle CPU time\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"The library tracks these states to provide:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Individual thread usage metrics"}),"\n",(0,r.jsx)(n.li,{children:"Overall CPU utilization"}),"\n",(0,r.jsx)(n.li,{children:"Statistical functions (min, max, average, median)"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["All thread monitoring functions require calling ",(0,r.jsx)(n.code,{children:"startProfilingCpu()"})," first."]}),"\n",(0,r.jsx)(n.h2,{id:"memory-monitoring",children:"Memory Monitoring"}),"\n",(0,r.jsx)(n.p,{children:"Memory monitoring is more straightforward as it uses direct system calls:"}),"\n",(0,r.jsx)(n.mermaid,{value:"graph LR\n    A[os.totalmem] --\x3e C[Total Memory]\n    B[os.freemem] --\x3e D[Used Memory]\n    C --\x3e E[Calculate Usage]\n    D --\x3e E"}),"\n",(0,r.jsx)(n.p,{children:"Memory calculations are instantaneous and don't require initialization or sampling intervals like CPU monitoring."}),"\n",(0,r.jsx)(n.h2,{id:"cross-platform-support",children:"Cross-Platform Support"}),"\n",(0,r.jsx)(n.p,{children:"The library handles platform-specific differences:"}),"\n","\n",(0,r.jsxs)(s.A,{groupId:"operating-systems",children:[(0,r.jsx)(l.A,{value:"linux",label:"Linux",default:!0,children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Physical core detection\nlscpu -p | egrep -v "^#" | sort -u -t, -k 2,4 | wc -l\n'})})}),(0,r.jsx)(l.A,{value:"macos",label:"macOS",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Physical core detection\nsysctl -n hw.physicalcpu\n"})})}),(0,r.jsx)(l.A,{value:"windows",label:"Windows",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-powershell",children:"# Physical core detection (fallback method)\nGet-CimInstance -ClassName Win32_Processor | Select-Object -ExpandProperty NumberOfCores\n"})})})]}),"\n",(0,r.jsx)(n.h2,{id:"important-considerations",children:"Important Considerations"}),"\n",(0,r.jsxs)(n.admonition,{title:"Accuracy",type:"caution",children:[(0,r.jsx)(n.p,{children:"The CPU usage calculations have some inherent limitations:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Results are estimates based on sampling intervals"}),"\n",(0,r.jsx)(n.li,{children:"Heavy system load can affect accuracy"}),"\n",(0,r.jsx)(n.li,{children:"Virtualized environments may provide less reliable data"}),"\n"]})]}),"\n",(0,r.jsx)(n.admonition,{title:"Best Practices",type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Initialize CPU profiling with ",(0,r.jsx)(n.code,{children:"await startProfilingCpu()"})," before using CPU/thread functions"]}),"\n",(0,r.jsx)(n.li,{children:"Use percentage thresholds (0-100) for readability"}),"\n",(0,r.jsx)(n.li,{children:"Remember there's a small delay when starting monitoring"}),"\n",(0,r.jsxs)(n.li,{children:["Clean up resources with ",(0,r.jsx)(n.code,{children:"stopProfilingCpu()"})," when done"]}),"\n",(0,r.jsx)(n.li,{children:"Consider the sampling interval when measuring rapid changes"}),"\n"]})}),"\n",(0,r.jsx)(n.h2,{id:"automatic-cleanup",children:"Automatic Cleanup"}),"\n",(0,r.jsx)(n.p,{children:"The library automatically registers cleanup handlers for:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Normal process exit"}),"\n",(0,r.jsx)(n.li,{children:"SIGINT (Ctrl+C)"}),"\n",(0,r.jsx)(n.li,{children:"SIGTERM (termination signal)"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["This ensures that monitoring resources are properly released when your application exits. However, you can manually clean up by calling ",(0,r.jsx)(n.code,{children:"stopProfilingCpu()"})," or its alias ",(0,r.jsx)(n.code,{children:"cleanup()"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},7647:(e,n,t)=>{t.d(n,{A:()=>C});var i=t(8101),r=t(3526),a=t(5093),s=t(5234),l=t(2569),o=t(1390),c=t(7775),u=t(7623);function d(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:r}}=e;return{value:n,label:t,attributes:i,default:r}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const r=(0,s.W6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o.aZ)(a),(0,i.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(r.location.search);n.set(a,e),r.replace({...r.location,search:n.toString()})}),[a,r])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,a=h(e),[s,o]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:a}))),[c,d]=m({queryString:t,groupId:r}),[f,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,a]=(0,u.Dv)(t);return[r,(0,i.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:r}),x=(()=>{const e=c??f;return p({value:e,tabValues:a})?e:null})();(0,l.A)((()=>{x&&o(x)}),[x]);return{selectedValue:s,selectValue:(0,i.useCallback)((e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);o(e),d(e),g(e)}),[d,g,a]),tabValues:a}}var g=t(3547);const x={tabList:"tabList_NQRc",tabItem:"tabItem_cMRk"};var b=t(5105);function j(e){let{className:n,block:t,selectedValue:i,selectValue:s,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),u=e=>{const n=e.currentTarget,t=o.indexOf(n),r=l[t].value;r!==i&&(c(n),s(r))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:l.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>{o.push(e)},onKeyDown:d,onClick:u,...a,className:(0,r.A)("tabs__item",x.tabItem,a?.className,{"tabs__item--active":i===n}),children:t??n},n)}))})}function v(e){let{lazy:n,children:t,selectedValue:a}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function y(e){const n=f(e);return(0,b.jsxs)("div",{className:(0,r.A)("tabs-container",x.tabList),children:[(0,b.jsx)(j,{...n,...e}),(0,b.jsx)(v,{...n,...e})]})}function C(e){const n=(0,g.A)();return(0,b.jsx)(y,{...e,children:d(e.children)},String(n))}}}]);