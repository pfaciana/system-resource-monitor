"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8239],{2897:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"examples/monitoring-performance","title":"Monitoring System Performance","description":"This guide demonstrates how to implement comprehensive system performance monitoring using System Resource Monitor.","source":"@site/docs/examples/monitoring-performance.md","sourceDirName":"examples","slug":"/examples/monitoring-performance","permalink":"/system-resource-monitor/docs/examples/monitoring-performance","draft":false,"unlisted":false,"editUrl":"https://github.com/pfaciana/system-resource-monitor/tree/master/docs/docs/examples/monitoring-performance.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"sidebar_label":"Monitoring Performance"},"sidebar":"tutorialSidebar","previous":{"title":"Examples","permalink":"/system-resource-monitor/docs/category/examples"},"next":{"title":"Thread Balancing","permalink":"/system-resource-monitor/docs/examples/thread-balancing"}}');var t=r(5105),s=r(3331);const i={sidebar_position:1,sidebar_label:"Monitoring Performance"},a="Monitoring System Performance",c={},l=[{value:"Real-Time System Monitor",id:"real-time-system-monitor",level:2},{value:"Resource Usage Alerts",id:"resource-usage-alerts",level:2}];function m(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"monitoring-system-performance",children:"Monitoring System Performance"})}),"\n",(0,t.jsx)(n.p,{children:"This guide demonstrates how to implement comprehensive system performance monitoring using System Resource Monitor."}),"\n",(0,t.jsx)(n.h2,{id:"real-time-system-monitor",children:"Real-Time System Monitor"}),"\n",(0,t.jsx)(n.p,{children:"Here's how to create a basic real-time system monitor that tracks CPU, memory, and thread usage:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import {\n  startProfilingCpu,\n  getCpuUsage,\n  getMemoryUsage,\n  getMinThread,\n  getMaxThread,\n  getAvgThread,\n  delay,\n  stopProfilingCpu,\n} from 'system-resource-monitor';\n\nasync function monitorSystem() {\n  // Initialize CPU profiling\n  await startProfilingCpu();\n  \n  try {\n    // Print header\n    console.log('\\n=== System Resource Monitor ===\\n');\n    \n    while (true) {\n      // Get current metrics\n      const cpuUsage = getCpuUsage();\n      const memUsage = getMemoryUsage(true);\n      \n      // Calculate thread statistics\n      const minThreadUsage = getMinThread();\n      const maxThreadUsage = getMaxThread();\n      const avgThreadUsage = getAvgThread();\n      \n      // Clear previous output\n      console.clear();\n      \n      // Display metrics\n      console.log('=== System Resource Monitor ===');\n      console.log(`CPU Usage: ${cpuUsage.toFixed(1)}%`);\n      console.log(`Memory Usage: ${memUsage.toFixed(1)}%`);\n      console.log('\\nThread Usage:');\n      console.log(`  Min: ${minThreadUsage.toFixed(1)}%`);\n      console.log(`  Max: ${maxThreadUsage.toFixed(1)}%`);\n      console.log(`  Avg: ${avgThreadUsage.toFixed(1)}%`);\n      \n      // Wait before next update\n      await delay(1000);\n    }\n  } catch (error) {\n    console.error('Monitoring error:', error);\n  }\n  \n  stopProfilingCpu();\n}\n\n// Start monitoring\nmonitorSystem();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"resource-usage-alerts",children:"Resource Usage Alerts"}),"\n",(0,t.jsx)(n.p,{children:"This example shows how to implement alerts for high resource usage:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import {\n  startProfilingCpu,\n  isCpuAbove,\n  isMemoryAbove,\n  isAnyThreadAbove,\n  getThreadUsage,\n  delay,\n  stopProfilingCpu,\n} from 'system-resource-monitor';\n\nasync function monitorWithAlerts() {\n  const CPU_THRESHOLD = 80;\n  const MEMORY_THRESHOLD = 90;\n  const THREAD_THRESHOLD = 95;\n  \n  // Initialize CPU profiling\n  await startProfilingCpu();\n  \n  try {\n    while (true) {\n      // Check CPU usage\n      if (isCpuAbove(CPU_THRESHOLD)) {\n        console.warn(`\u26a0\ufe0f High CPU usage detected (>${CPU_THRESHOLD}%)`);\n      }\n      \n      // Check memory usage\n      if (isMemoryAbove(MEMORY_THRESHOLD)) {\n        console.warn(`\u26a0\ufe0f High memory usage detected (>${MEMORY_THRESHOLD}%)`);\n      }\n      \n      // Check thread usage\n      if (isAnyThreadAbove(THREAD_THRESHOLD)) {\n        const threadUsages = getThreadUsage();\n        const highThreads = threadUsages\n          .map((usage, index) => ({ index, usage: usage * 100 }))\n          .filter(thread => thread.usage > THREAD_THRESHOLD);\n          \n        console.warn(`\u26a0\ufe0f High thread usage detected:`);\n        highThreads.forEach(thread => {\n          console.warn(`   Thread ${thread.index}: ${thread.usage.toFixed(1)}%`);\n        });\n      }\n      \n      await delay(5000); // Check every 5 seconds\n    }\n  } catch (error) {\n    console.error('Alert monitoring error:', error);\n  }\n  \n  stopProfilingCpu();\n}\n\n// Start alert monitoring\nmonitorWithAlerts();\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["CPU and thread monitoring functions require calling ",(0,t.jsx)(n.code,{children:"startProfilingCpu()"})," first"]}),"\n",(0,t.jsxs)(n.li,{children:["More frequent sampling (shorter intervals) may:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Increase CPU overhead"}),"\n",(0,t.jsx)(n.li,{children:"Provide less accurate readings"}),"\n",(0,t.jsx)(n.li,{children:"Impact system performance\nFor most applications, using intervals of 1 second or longer is recommended."}),"\n"]}),"\n"]}),"\n"]})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},3331:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var o=r(8101);const t={},s=o.createContext(t);function i(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);