"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1767],{131:(e,n,r)=>{r.d(n,{A:()=>o});r(8101);var t=r(3526);const a={tabItem:"tabItem_w3dh"};var s=r(5105);function o(e){let{children:n,hidden:r,className:o}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,t.A)(a.tabItem,o),hidden:r,children:n})}},3331:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var t=r(8101);const a={},s=t.createContext(a);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(s.Provider,{value:n},e.children)}},7647:(e,n,r)=>{r.d(n,{A:()=>w});var t=r(8101),a=r(3526),s=r(5093),o=r(5234),l=r(2569),i=r(1390),c=r(7775),u=r(7623);function m(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:r}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return m(e).map((e=>{let{props:{value:n,label:r,attributes:t,default:a}}=e;return{value:n,label:r,attributes:t,default:a}}))}(r);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function d(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:r}=e;const a=(0,o.W6)(),s=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,i.aZ)(s),(0,t.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(a.location.search);n.set(s,e),a.replace({...a.location,search:n.toString()})}),[s,a])]}function y(e){const{defaultValue:n,queryString:r=!1,groupId:a}=e,s=h(e),[o,i]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!d({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=r.find((e=>e.default))??r[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:s}))),[c,m]=g({queryString:r,groupId:a}),[y,p]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,s]=(0,u.Dv)(r);return[a,(0,t.useCallback)((e=>{r&&s.set(e)}),[r,s])]}({groupId:a}),f=(()=>{const e=c??y;return d({value:e,tabValues:s})?e:null})();(0,l.A)((()=>{f&&i(f)}),[f]);return{selectedValue:o,selectValue:(0,t.useCallback)((e=>{if(!d({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);i(e),m(e),p(e)}),[m,p,s]),tabValues:s}}var p=r(3547);const f={tabList:"tabList_NQRc",tabItem:"tabItem_cMRk"};var v=r(5105);function b(e){let{className:n,block:r,selectedValue:t,selectValue:o,tabValues:l}=e;const i=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),u=e=>{const n=e.currentTarget,r=i.indexOf(n),a=l[r].value;a!==t&&(c(n),o(a))},m=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const r=i.indexOf(e.currentTarget)+1;n=i[r]??i[0];break}case"ArrowLeft":{const r=i.indexOf(e.currentTarget)-1;n=i[r]??i[i.length-1];break}}n?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":r},n),children:l.map((e=>{let{value:n,label:r,attributes:s}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>{i.push(e)},onKeyDown:m,onClick:u,...s,className:(0,a.A)("tabs__item",f.tabItem,s?.className,{"tabs__item--active":t===n}),children:r??n},n)}))})}function M(e){let{lazy:n,children:r,selectedValue:s}=e;const o=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===s));return e?(0,t.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function x(e){const n=y(e);return(0,v.jsxs)("div",{className:(0,a.A)("tabs-container",f.tabList),children:[(0,v.jsx)(b,{...n,...e}),(0,v.jsx)(M,{...n,...e})]})}function w(e){const n=(0,p.A)();return(0,v.jsx)(x,{...e,children:m(e.children)},String(n))}},8029:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>m});const t=JSON.parse('{"id":"examples/memory-alerts","title":"Memory Usage Alerts","description":"This guide demonstrates how to implement effective memory monitoring and alert systems.","source":"@site/docs/examples/memory-alerts.md","sourceDirName":"examples","slug":"/examples/memory-alerts","permalink":"/system-resource-monitor/docs/examples/memory-alerts","draft":false,"unlisted":false,"editUrl":"https://github.com/pfaciana/system-resource-monitor/tree/master/docs/docs/examples/memory-alerts.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"sidebar_label":"Memory Alerts"},"sidebar":"tutorialSidebar","previous":{"title":"Thread Balancing","permalink":"/system-resource-monitor/docs/examples/thread-balancing"},"next":{"title":"Cross-Platform Detection","permalink":"/system-resource-monitor/docs/examples/cross-platform"}}');var a=r(5105),s=r(3331),o=r(7647),l=r(131);const i={sidebar_position:3,sidebar_label:"Memory Alerts"},c="Memory Usage Alerts",u={},m=[{value:"Memory Health Monitor",id:"memory-health-monitor",level:2},{value:"Graduated Alert System",id:"graduated-alert-system",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"memory-usage-alerts",children:"Memory Usage Alerts"})}),"\n",(0,a.jsx)(n.p,{children:"This guide demonstrates how to implement effective memory monitoring and alert systems."}),"\n",(0,a.jsx)(n.h2,{id:"memory-health-monitor",children:"Memory Health Monitor"}),"\n",(0,a.jsx)(n.p,{children:"Create a comprehensive memory health monitoring system:"}),"\n","\n",(0,a.jsxs)(o.A,{groupId:"programming-language",children:[(0,a.jsx)(l.A,{value:"typescript",label:"TypeScript",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import {\n  getMemoryUsage,\n  getTotalMemory,\n  getUsedMemory,\n  delay\n} from 'system-resource-monitor';\n\ninterface MemoryHealth {\n  status: 'healthy' | 'warning' | 'critical';\n  usagePercent: number;\n  freeGB: number;\n  totalGB: number;\n  message: string;\n}\n\nasync function monitorMemoryHealth(\n  warningThreshold: number = 70,\n  criticalThreshold: number = 90\n): Promise<void> {\n  try {\n    while (true) {\n      const health = checkMemoryHealth(warningThreshold, criticalThreshold);\n      displayMemoryStatus(health);\n      await delay(1000);\n    }\n  } catch (error) {\n    console.error('Memory monitoring error:', error);\n  }\n}\n\nfunction checkMemoryHealth(\n  warningThreshold: number,\n  criticalThreshold: number\n): MemoryHealth {\n  const usagePercent = getMemoryUsage(true);\n  const totalGB = getTotalMemory(true);\n  const usedGB = getUsedMemory(true);\n  const freeGB = totalGB - usedGB;\n  \n  let status: MemoryHealth['status'] = 'healthy';\n  let message = 'Memory usage is normal';\n  \n  if (usagePercent >= criticalThreshold) {\n    status = 'critical';\n    message = `Critical: Memory usage is at ${usagePercent.toFixed(1)}%`;\n  } else if (usagePercent >= warningThreshold) {\n    status = 'warning';\n    message = `Warning: Memory usage is at ${usagePercent.toFixed(1)}%`;\n  }\n  \n  return { status, usagePercent, freeGB, totalGB, message };\n}\n\nfunction displayMemoryStatus(health: MemoryHealth): void {\n  const colors = {\n    healthy: '\\x1b[32m', // Green\n    warning: '\\x1b[33m', // Yellow\n    critical: '\\x1b[31m', // Red\n    reset: '\\x1b[0m'\n  };\n  \n  console.clear();\n  console.log('=== Memory Health Monitor ===\\n');\n  console.log(`Status: ${colors[health.status]}${health.status}${colors.reset}`);\n  console.log(`Usage: ${health.usagePercent.toFixed(1)}%`);\n  console.log(`Free Memory: ${health.freeGB.toFixed(1)} GB`);\n  console.log(`Total Memory: ${health.totalGB.toFixed(1)} GB`);\n  console.log(`\\nMessage: ${health.message}`);\n}\n\nmonitorMemoryHealth()\n"})})}),(0,a.jsx)(l.A,{value:"javascript",label:"JavaScript",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import {\n  getMemoryUsage,\n  getTotalMemory,\n  getUsedMemory,\n  delay\n} from 'system-resource-monitor';\n\nasync function monitorMemoryHealth(\n  warningThreshold = 70,\n  criticalThreshold = 90\n) {\n  try {\n    while (true) {\n      const health = checkMemoryHealth(warningThreshold, criticalThreshold);\n      displayMemoryStatus(health);\n      await delay(1000);\n    }\n  } catch (error) {\n    console.error('Memory monitoring error:', error);\n  }\n}\n\nfunction checkMemoryHealth(warningThreshold, criticalThreshold) {\n  const usagePercent = getMemoryUsage(true);\n  const totalGB = getTotalMemory(true);\n  const usedGB = getUsedMemory(true);\n  const freeGB = totalGB - usedGB;\n  \n  let status = 'healthy';\n  let message = 'Memory usage is normal';\n  \n  if (usagePercent >= criticalThreshold) {\n    status = 'critical';\n    message = `Critical: Memory usage is at ${usagePercent.toFixed(1)}%`;\n  } else if (usagePercent >= warningThreshold) {\n    status = 'warning';\n    message = `Warning: Memory usage is at ${usagePercent.toFixed(1)}%`;\n  }\n  \n  return { status, usagePercent, freeGB, totalGB, message };\n}\n\nfunction displayMemoryStatus(health) {\n  const colors = {\n    healthy: '\\x1b[32m', // Green\n    warning: '\\x1b[33m', // Yellow\n    critical: '\\x1b[31m', // Red\n    reset: '\\x1b[0m'\n  };\n  \n  console.clear();\n  console.log('=== Memory Health Monitor ===\\n');\n  console.log(`Status: ${colors[health.status]}${health.status}${colors.reset}`);\n  console.log(`Usage: ${health.usagePercent.toFixed(1)}%`);\n  console.log(`Free Memory: ${health.freeGB.toFixed(1)} GB`);\n  console.log(`Total Memory: ${health.totalGB.toFixed(1)} GB`);\n  console.log(`\\nMessage: ${health.message}`);\n}\n\nmonitorMemoryHealth()\n"})})})]}),"\n",(0,a.jsx)(n.h2,{id:"graduated-alert-system",children:"Graduated Alert System"}),"\n",(0,a.jsx)(n.p,{children:"Implement a graduated alert system with different severity levels:"}),"\n",(0,a.jsxs)(o.A,{groupId:"programming-language",children:[(0,a.jsx)(l.A,{value:"typescript",label:"TypeScript",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import {\n  getMemoryUsage,\n  delay\n} from 'system-resource-monitor';\n\ninterface MemoryAlert {\n  level: 'info' | 'warning' | 'error' | 'critical';\n  threshold: number;\n  message: string;\n  action?: () => Promise<void>;\n}\n\nclass MemoryAlertSystem {\n  private readonly alerts: MemoryAlert[];\n  private activeAlerts: Set<string> = new Set();\n  \n  constructor() {\n    this.alerts = [\n      {\n        level: 'info',\n        threshold: 50,\n        message: 'Memory usage above 50%'\n      },\n      {\n        level: 'warning',\n        threshold: 70,\n        message: 'Memory usage above 70%',\n        action: async () => {\n          console.warn('Consider freeing up memory');\n        }\n      },\n      {\n        level: 'error',\n        threshold: 85,\n        message: 'Memory usage above 85%',\n        action: async () => {\n          console.error('Memory pressure detected');\n          // Add your memory pressure handling here\n        }\n      },\n      {\n        level: 'critical',\n        threshold: 95,\n        message: 'Critical memory usage',\n        action: async () => {\n          console.error('Taking emergency action');\n          // Add your emergency handling here\n        }\n      }\n    ];\n  }\n  \n  async monitor(): Promise<void> {\n    try {\n      while (true) {\n        const usage = getMemoryUsage(true);\n        await this.checkAlerts(usage);\n        await delay(1000);\n      }\n    } catch (error) {\n      console.error('Alert system error:', error);\n    }\n  }\n  \n  private async checkAlerts(usage: number): Promise<void> {\n    for (const alert of this.alerts) {\n      const alertKey = `${alert.level}-${alert.threshold}`;\n      \n      if (usage >= alert.threshold) {\n        if (!this.activeAlerts.has(alertKey)) {\n          this.activeAlerts.add(alertKey);\n          console.log(`[${alert.level.toUpperCase()}] ${alert.message}`);\n          if (alert.action) {\n            await alert.action();\n          }\n        }\n      } else {\n        this.activeAlerts.delete(alertKey);\n      }\n    }\n  }\n}\n\nconst alertSystem = new MemoryAlertSystem()\nawait alertSystem.monitor()\n"})})}),(0,a.jsx)(l.A,{value:"javascript",label:"JavaScript",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import {\n  getMemoryUsage,\n  delay\n} from 'system-resource-monitor';\n\nclass MemoryAlertSystem {\n  constructor() {\n    this.alerts = [\n      {\n        level: 'info',\n        threshold: 50,\n        message: 'Memory usage above 50%'\n      },\n      {\n        level: 'warning',\n        threshold: 70,\n        message: 'Memory usage above 70%',\n        action: async () => {\n          console.warn('Consider freeing up memory');\n        }\n      },\n      {\n        level: 'error',\n        threshold: 85,\n        message: 'Memory usage above 85%',\n        action: async () => {\n          console.error('Memory pressure detected');\n          // Add your memory pressure handling here\n        }\n      },\n      {\n        level: 'critical',\n        threshold: 95,\n        message: 'Critical memory usage',\n        action: async () => {\n          console.error('Taking emergency action');\n          // Add your emergency handling here\n        }\n      }\n    ];\n    this.activeAlerts = new Set();\n  }\n  \n  async monitor() {\n    try {\n      while (true) {\n        const usage = getMemoryUsage(true);\n        await this.checkAlerts(usage);\n        await delay(1000);\n      }\n    } catch (error) {\n      console.error('Alert system error:', error);\n    }\n  }\n  \n  async checkAlerts(usage) {\n    for (const alert of this.alerts) {\n      const alertKey = `${alert.level}-${alert.threshold}`;\n      \n      if (usage >= alert.threshold) {\n        if (!this.activeAlerts.has(alertKey)) {\n          this.activeAlerts.add(alertKey);\n          console.log(`[${alert.level.toUpperCase()}] ${alert.message}`);\n          if (alert.action) {\n            await alert.action();\n          }\n        }\n      } else {\n        this.activeAlerts.delete(alertKey);\n      }\n    }\n  }\n}\n\nconst alertSystem = new MemoryAlertSystem()\nawait alertSystem.monitor()\n"})})})]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}}}]);